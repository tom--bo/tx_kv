// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kv_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kv_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kv_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kv_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kv_2eproto;
namespace txkv {
class KeyRequest;
struct KeyRequestDefaultTypeInternal;
extern KeyRequestDefaultTypeInternal _KeyRequest_default_instance_;
class TxReply;
struct TxReplyDefaultTypeInternal;
extern TxReplyDefaultTypeInternal _TxReply_default_instance_;
class TxRequest;
struct TxRequestDefaultTypeInternal;
extern TxRequestDefaultTypeInternal _TxRequest_default_instance_;
class ValReply;
struct ValReplyDefaultTypeInternal;
extern ValReplyDefaultTypeInternal _ValReply_default_instance_;
class WriteRequest;
struct WriteRequestDefaultTypeInternal;
extern WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
}  // namespace txkv
PROTOBUF_NAMESPACE_OPEN
template<> ::txkv::KeyRequest* Arena::CreateMaybeMessage<::txkv::KeyRequest>(Arena*);
template<> ::txkv::TxReply* Arena::CreateMaybeMessage<::txkv::TxReply>(Arena*);
template<> ::txkv::TxRequest* Arena::CreateMaybeMessage<::txkv::TxRequest>(Arena*);
template<> ::txkv::ValReply* Arena::CreateMaybeMessage<::txkv::ValReply>(Arena*);
template<> ::txkv::WriteRequest* Arena::CreateMaybeMessage<::txkv::WriteRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace txkv {

// ===================================================================

class TxRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txkv.TxRequest) */ {
 public:
  inline TxRequest() : TxRequest(nullptr) {}
  ~TxRequest() override;
  explicit constexpr TxRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxRequest(const TxRequest& from);
  TxRequest(TxRequest&& from) noexcept
    : TxRequest() {
    *this = ::std::move(from);
  }

  inline TxRequest& operator=(const TxRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxRequest& operator=(TxRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxRequest* internal_default_instance() {
    return reinterpret_cast<const TxRequest*>(
               &_TxRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TxRequest& a, TxRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TxRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TxRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txkv.TxRequest";
  }
  protected:
  explicit TxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidFieldNumber = 1,
  };
  // uint64 tid = 1;
  void clear_tid();
  uint64_t tid() const;
  void set_tid(uint64_t value);
  private:
  uint64_t _internal_tid() const;
  void _internal_set_tid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:txkv.TxRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t tid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class TxReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txkv.TxReply) */ {
 public:
  inline TxReply() : TxReply(nullptr) {}
  ~TxReply() override;
  explicit constexpr TxReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxReply(const TxReply& from);
  TxReply(TxReply&& from) noexcept
    : TxReply() {
    *this = ::std::move(from);
  }

  inline TxReply& operator=(const TxReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxReply& operator=(TxReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxReply* internal_default_instance() {
    return reinterpret_cast<const TxReply*>(
               &_TxReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TxReply& a, TxReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TxReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TxReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txkv.TxReply";
  }
  protected:
  explicit TxReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // uint64 tid = 1;
  void clear_tid();
  uint64_t tid() const;
  void set_tid(uint64_t value);
  private:
  uint64_t _internal_tid() const;
  void _internal_set_tid(uint64_t value);
  public:

  // uint32 error_code = 2;
  void clear_error_code();
  uint32_t error_code() const;
  void set_error_code(uint32_t value);
  private:
  uint32_t _internal_error_code() const;
  void _internal_set_error_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:txkv.TxReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t tid_;
  uint32_t error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class KeyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txkv.KeyRequest) */ {
 public:
  inline KeyRequest() : KeyRequest(nullptr) {}
  ~KeyRequest() override;
  explicit constexpr KeyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyRequest(const KeyRequest& from);
  KeyRequest(KeyRequest&& from) noexcept
    : KeyRequest() {
    *this = ::std::move(from);
  }

  inline KeyRequest& operator=(const KeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyRequest& operator=(KeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyRequest* internal_default_instance() {
    return reinterpret_cast<const KeyRequest*>(
               &_KeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(KeyRequest& a, KeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txkv.KeyRequest";
  }
  protected:
  explicit KeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // uint64 tid = 1;
  void clear_tid();
  uint64_t tid() const;
  void set_tid(uint64_t value);
  private:
  uint64_t _internal_tid() const;
  void _internal_set_tid(uint64_t value);
  public:

  // uint64 key = 2;
  void clear_key();
  uint64_t key() const;
  void set_key(uint64_t value);
  private:
  uint64_t _internal_key() const;
  void _internal_set_key(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:txkv.KeyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t tid_;
  uint64_t key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class ValReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txkv.ValReply) */ {
 public:
  inline ValReply() : ValReply(nullptr) {}
  ~ValReply() override;
  explicit constexpr ValReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValReply(const ValReply& from);
  ValReply(ValReply&& from) noexcept
    : ValReply() {
    *this = ::std::move(from);
  }

  inline ValReply& operator=(const ValReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValReply& operator=(ValReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValReply* internal_default_instance() {
    return reinterpret_cast<const ValReply*>(
               &_ValReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ValReply& a, ValReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ValReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txkv.ValReply";
  }
  protected:
  explicit ValReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // uint64 val = 1;
  void clear_val();
  uint64_t val() const;
  void set_val(uint64_t value);
  private:
  uint64_t _internal_val() const;
  void _internal_set_val(uint64_t value);
  public:

  // uint32 error_code = 2;
  void clear_error_code();
  uint32_t error_code() const;
  void set_error_code(uint32_t value);
  private:
  uint32_t _internal_error_code() const;
  void _internal_set_error_code(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:txkv.ValReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t val_;
  uint32_t error_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// -------------------------------------------------------------------

class WriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:txkv.WriteRequest) */ {
 public:
  inline WriteRequest() : WriteRequest(nullptr) {}
  ~WriteRequest() override;
  explicit constexpr WriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteRequest(const WriteRequest& from);
  WriteRequest(WriteRequest&& from) noexcept
    : WriteRequest() {
    *this = ::std::move(from);
  }

  inline WriteRequest& operator=(const WriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteRequest& operator=(WriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteRequest* internal_default_instance() {
    return reinterpret_cast<const WriteRequest*>(
               &_WriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriteRequest& a, WriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "txkv.WriteRequest";
  }
  protected:
  explicit WriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTidFieldNumber = 1,
    kKeyFieldNumber = 2,
    kValFieldNumber = 3,
  };
  // uint64 tid = 1;
  void clear_tid();
  uint64_t tid() const;
  void set_tid(uint64_t value);
  private:
  uint64_t _internal_tid() const;
  void _internal_set_tid(uint64_t value);
  public:

  // uint64 key = 2;
  void clear_key();
  uint64_t key() const;
  void set_key(uint64_t value);
  private:
  uint64_t _internal_key() const;
  void _internal_set_key(uint64_t value);
  public:

  // uint64 val = 3;
  void clear_val();
  uint64_t val() const;
  void set_val(uint64_t value);
  private:
  uint64_t _internal_val() const;
  void _internal_set_val(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:txkv.WriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t tid_;
  uint64_t key_;
  uint64_t val_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kv_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TxRequest

// uint64 tid = 1;
inline void TxRequest::clear_tid() {
  tid_ = uint64_t{0u};
}
inline uint64_t TxRequest::_internal_tid() const {
  return tid_;
}
inline uint64_t TxRequest::tid() const {
  // @@protoc_insertion_point(field_get:txkv.TxRequest.tid)
  return _internal_tid();
}
inline void TxRequest::_internal_set_tid(uint64_t value) {
  
  tid_ = value;
}
inline void TxRequest::set_tid(uint64_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:txkv.TxRequest.tid)
}

// -------------------------------------------------------------------

// TxReply

// uint64 tid = 1;
inline void TxReply::clear_tid() {
  tid_ = uint64_t{0u};
}
inline uint64_t TxReply::_internal_tid() const {
  return tid_;
}
inline uint64_t TxReply::tid() const {
  // @@protoc_insertion_point(field_get:txkv.TxReply.tid)
  return _internal_tid();
}
inline void TxReply::_internal_set_tid(uint64_t value) {
  
  tid_ = value;
}
inline void TxReply::set_tid(uint64_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:txkv.TxReply.tid)
}

// uint32 error_code = 2;
inline void TxReply::clear_error_code() {
  error_code_ = 0u;
}
inline uint32_t TxReply::_internal_error_code() const {
  return error_code_;
}
inline uint32_t TxReply::error_code() const {
  // @@protoc_insertion_point(field_get:txkv.TxReply.error_code)
  return _internal_error_code();
}
inline void TxReply::_internal_set_error_code(uint32_t value) {
  
  error_code_ = value;
}
inline void TxReply::set_error_code(uint32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:txkv.TxReply.error_code)
}

// -------------------------------------------------------------------

// KeyRequest

// uint64 tid = 1;
inline void KeyRequest::clear_tid() {
  tid_ = uint64_t{0u};
}
inline uint64_t KeyRequest::_internal_tid() const {
  return tid_;
}
inline uint64_t KeyRequest::tid() const {
  // @@protoc_insertion_point(field_get:txkv.KeyRequest.tid)
  return _internal_tid();
}
inline void KeyRequest::_internal_set_tid(uint64_t value) {
  
  tid_ = value;
}
inline void KeyRequest::set_tid(uint64_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:txkv.KeyRequest.tid)
}

// uint64 key = 2;
inline void KeyRequest::clear_key() {
  key_ = uint64_t{0u};
}
inline uint64_t KeyRequest::_internal_key() const {
  return key_;
}
inline uint64_t KeyRequest::key() const {
  // @@protoc_insertion_point(field_get:txkv.KeyRequest.key)
  return _internal_key();
}
inline void KeyRequest::_internal_set_key(uint64_t value) {
  
  key_ = value;
}
inline void KeyRequest::set_key(uint64_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:txkv.KeyRequest.key)
}

// -------------------------------------------------------------------

// ValReply

// uint64 val = 1;
inline void ValReply::clear_val() {
  val_ = uint64_t{0u};
}
inline uint64_t ValReply::_internal_val() const {
  return val_;
}
inline uint64_t ValReply::val() const {
  // @@protoc_insertion_point(field_get:txkv.ValReply.val)
  return _internal_val();
}
inline void ValReply::_internal_set_val(uint64_t value) {
  
  val_ = value;
}
inline void ValReply::set_val(uint64_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:txkv.ValReply.val)
}

// uint32 error_code = 2;
inline void ValReply::clear_error_code() {
  error_code_ = 0u;
}
inline uint32_t ValReply::_internal_error_code() const {
  return error_code_;
}
inline uint32_t ValReply::error_code() const {
  // @@protoc_insertion_point(field_get:txkv.ValReply.error_code)
  return _internal_error_code();
}
inline void ValReply::_internal_set_error_code(uint32_t value) {
  
  error_code_ = value;
}
inline void ValReply::set_error_code(uint32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:txkv.ValReply.error_code)
}

// -------------------------------------------------------------------

// WriteRequest

// uint64 tid = 1;
inline void WriteRequest::clear_tid() {
  tid_ = uint64_t{0u};
}
inline uint64_t WriteRequest::_internal_tid() const {
  return tid_;
}
inline uint64_t WriteRequest::tid() const {
  // @@protoc_insertion_point(field_get:txkv.WriteRequest.tid)
  return _internal_tid();
}
inline void WriteRequest::_internal_set_tid(uint64_t value) {
  
  tid_ = value;
}
inline void WriteRequest::set_tid(uint64_t value) {
  _internal_set_tid(value);
  // @@protoc_insertion_point(field_set:txkv.WriteRequest.tid)
}

// uint64 key = 2;
inline void WriteRequest::clear_key() {
  key_ = uint64_t{0u};
}
inline uint64_t WriteRequest::_internal_key() const {
  return key_;
}
inline uint64_t WriteRequest::key() const {
  // @@protoc_insertion_point(field_get:txkv.WriteRequest.key)
  return _internal_key();
}
inline void WriteRequest::_internal_set_key(uint64_t value) {
  
  key_ = value;
}
inline void WriteRequest::set_key(uint64_t value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:txkv.WriteRequest.key)
}

// uint64 val = 3;
inline void WriteRequest::clear_val() {
  val_ = uint64_t{0u};
}
inline uint64_t WriteRequest::_internal_val() const {
  return val_;
}
inline uint64_t WriteRequest::val() const {
  // @@protoc_insertion_point(field_get:txkv.WriteRequest.val)
  return _internal_val();
}
inline void WriteRequest::_internal_set_val(uint64_t value) {
  
  val_ = value;
}
inline void WriteRequest::set_val(uint64_t value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:txkv.WriteRequest.val)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace txkv

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kv_2eproto
