// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kv.proto

#include "kv.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace txkv {
constexpr BaseRequest::BaseRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cid_(uint64_t{0u}){}
struct BaseRequestDefaultTypeInternal {
  constexpr BaseRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BaseRequestDefaultTypeInternal() {}
  union {
    BaseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
constexpr ConnectionReply::ConnectionReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cid_(uint64_t{0u})
  , error_code_(0u){}
struct ConnectionReplyDefaultTypeInternal {
  constexpr ConnectionReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionReplyDefaultTypeInternal() {}
  union {
    ConnectionReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionReplyDefaultTypeInternal _ConnectionReply_default_instance_;
constexpr ErrorReply::ErrorReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_code_(0u){}
struct ErrorReplyDefaultTypeInternal {
  constexpr ErrorReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrorReplyDefaultTypeInternal() {}
  union {
    ErrorReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrorReplyDefaultTypeInternal _ErrorReply_default_instance_;
constexpr KeyRequest::KeyRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cid_(uint64_t{0u})
  , key_(uint64_t{0u}){}
struct KeyRequestDefaultTypeInternal {
  constexpr KeyRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyRequestDefaultTypeInternal() {}
  union {
    KeyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyRequestDefaultTypeInternal _KeyRequest_default_instance_;
constexpr GetReply::GetReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_(uint64_t{0u})
  , error_code_(0u){}
struct GetReplyDefaultTypeInternal {
  constexpr GetReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetReplyDefaultTypeInternal() {}
  union {
    GetReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetReplyDefaultTypeInternal _GetReply_default_instance_;
constexpr WriteRequest::WriteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cid_(uint64_t{0u})
  , key_(uint64_t{0u})
  , val_(uint64_t{0u}){}
struct WriteRequestDefaultTypeInternal {
  constexpr WriteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WriteRequestDefaultTypeInternal() {}
  union {
    WriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WriteRequestDefaultTypeInternal _WriteRequest_default_instance_;
}  // namespace txkv
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kv_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kv_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kv_2eproto = nullptr;

const uint32_t TableStruct_kv_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txkv::BaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txkv::BaseRequest, cid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txkv::ConnectionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txkv::ConnectionReply, cid_),
  PROTOBUF_FIELD_OFFSET(::txkv::ConnectionReply, error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txkv::ErrorReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txkv::ErrorReply, error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txkv::KeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txkv::KeyRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::txkv::KeyRequest, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txkv::GetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txkv::GetReply, val_),
  PROTOBUF_FIELD_OFFSET(::txkv::GetReply, error_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::txkv::WriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::txkv::WriteRequest, cid_),
  PROTOBUF_FIELD_OFFSET(::txkv::WriteRequest, key_),
  PROTOBUF_FIELD_OFFSET(::txkv::WriteRequest, val_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::txkv::BaseRequest)},
  { 7, -1, -1, sizeof(::txkv::ConnectionReply)},
  { 15, -1, -1, sizeof(::txkv::ErrorReply)},
  { 22, -1, -1, sizeof(::txkv::KeyRequest)},
  { 30, -1, -1, sizeof(::txkv::GetReply)},
  { 38, -1, -1, sizeof(::txkv::WriteRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txkv::_BaseRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txkv::_ConnectionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txkv::_ErrorReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txkv::_KeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txkv::_GetReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::txkv::_WriteRequest_default_instance_),
};

const char descriptor_table_protodef_kv_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010kv.proto\022\004txkv\032\033google/protobuf/empty."
  "proto\"\032\n\013BaseRequest\022\013\n\003cid\030\001 \001(\004\"2\n\017Con"
  "nectionReply\022\013\n\003cid\030\001 \001(\004\022\022\n\nerror_code\030"
  "\002 \001(\r\" \n\nErrorReply\022\022\n\nerror_code\030\001 \001(\r\""
  "&\n\nKeyRequest\022\013\n\003cid\030\001 \001(\004\022\013\n\003key\030\002 \001(\004\""
  "+\n\010GetReply\022\013\n\003val\030\001 \001(\004\022\022\n\nerror_code\030\002"
  " \001(\r\"5\n\014WriteRequest\022\013\n\003cid\030\001 \001(\004\022\013\n\003key"
  "\030\002 \001(\004\022\013\n\003val\030\003 \001(\0042\335\002\n\004MyKV\022:\n\007Connect\022"
  "\026.google.protobuf.Empty\032\025.txkv.Connectio"
  "nReply\"\000\022.\n\005Begin\022\021.txkv.BaseRequest\032\020.t"
  "xkv.ErrorReply\"\000\022/\n\006Commit\022\021.txkv.BaseRe"
  "quest\032\020.txkv.ErrorReply\"\000\0221\n\010Rollback\022\021."
  "txkv.BaseRequest\032\020.txkv.ErrorReply\"\000\022)\n\003"
  "Get\022\020.txkv.KeyRequest\032\016.txkv.GetReply\"\000\022"
  "-\n\003Put\022\022.txkv.WriteRequest\032\020.txkv.ErrorR"
  "eply\"\000\022+\n\003Del\022\020.txkv.KeyRequest\032\020.txkv.E"
  "rrorReply\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kv_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kv_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kv_2eproto = {
  false, false, 659, descriptor_table_protodef_kv_2eproto, "kv.proto", 
  &descriptor_table_kv_2eproto_once, descriptor_table_kv_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_kv_2eproto::offsets,
  file_level_metadata_kv_2eproto, file_level_enum_descriptors_kv_2eproto, file_level_service_descriptors_kv_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_kv_2eproto_getter() {
  return &descriptor_table_kv_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_kv_2eproto(&descriptor_table_kv_2eproto);
namespace txkv {

// ===================================================================

class BaseRequest::_Internal {
 public:
};

BaseRequest::BaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:txkv.BaseRequest)
}
BaseRequest::BaseRequest(const BaseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cid_ = from.cid_;
  // @@protoc_insertion_point(copy_constructor:txkv.BaseRequest)
}

inline void BaseRequest::SharedCtor() {
cid_ = uint64_t{0u};
}

BaseRequest::~BaseRequest() {
  // @@protoc_insertion_point(destructor:txkv.BaseRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BaseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BaseRequest::ArenaDtor(void* object) {
  BaseRequest* _this = reinterpret_cast< BaseRequest* >(object);
  (void)_this;
}
void BaseRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txkv.BaseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BaseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txkv.BaseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cid = 1;
  if (this->_internal_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txkv.BaseRequest)
  return target;
}

size_t BaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txkv.BaseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cid = 1;
  if (this->_internal_cid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BaseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BaseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BaseRequest::GetClassData() const { return &_class_data_; }

void BaseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BaseRequest *>(to)->MergeFrom(
      static_cast<const BaseRequest &>(from));
}


void BaseRequest::MergeFrom(const BaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txkv.BaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cid() != 0) {
    _internal_set_cid(from._internal_cid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BaseRequest::CopyFrom(const BaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txkv.BaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseRequest::IsInitialized() const {
  return true;
}

void BaseRequest::InternalSwap(BaseRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cid_, other->cid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kv_2eproto_getter, &descriptor_table_kv_2eproto_once,
      file_level_metadata_kv_2eproto[0]);
}

// ===================================================================

class ConnectionReply::_Internal {
 public:
};

ConnectionReply::ConnectionReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:txkv.ConnectionReply)
}
ConnectionReply::ConnectionReply(const ConnectionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cid_, &from.cid_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:txkv.ConnectionReply)
}

inline void ConnectionReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(error_code_));
}

ConnectionReply::~ConnectionReply() {
  // @@protoc_insertion_point(destructor:txkv.ConnectionReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectionReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConnectionReply::ArenaDtor(void* object) {
  ConnectionReply* _this = reinterpret_cast< ConnectionReply* >(object);
  (void)_this;
}
void ConnectionReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txkv.ConnectionReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txkv.ConnectionReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cid = 1;
  if (this->_internal_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cid(), target);
  }

  // uint32 error_code = 2;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txkv.ConnectionReply)
  return target;
}

size_t ConnectionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txkv.ConnectionReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cid = 1;
  if (this->_internal_cid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cid());
  }

  // uint32 error_code = 2;
  if (this->_internal_error_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectionReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionReply::GetClassData() const { return &_class_data_; }

void ConnectionReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConnectionReply *>(to)->MergeFrom(
      static_cast<const ConnectionReply &>(from));
}


void ConnectionReply::MergeFrom(const ConnectionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txkv.ConnectionReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cid() != 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from._internal_error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionReply::CopyFrom(const ConnectionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txkv.ConnectionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionReply::IsInitialized() const {
  return true;
}

void ConnectionReply::InternalSwap(ConnectionReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionReply, error_code_)
      + sizeof(ConnectionReply::error_code_)
      - PROTOBUF_FIELD_OFFSET(ConnectionReply, cid_)>(
          reinterpret_cast<char*>(&cid_),
          reinterpret_cast<char*>(&other->cid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kv_2eproto_getter, &descriptor_table_kv_2eproto_once,
      file_level_metadata_kv_2eproto[1]);
}

// ===================================================================

class ErrorReply::_Internal {
 public:
};

ErrorReply::ErrorReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:txkv.ErrorReply)
}
ErrorReply::ErrorReply(const ErrorReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:txkv.ErrorReply)
}

inline void ErrorReply::SharedCtor() {
error_code_ = 0u;
}

ErrorReply::~ErrorReply() {
  // @@protoc_insertion_point(destructor:txkv.ErrorReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ErrorReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ErrorReply::ArenaDtor(void* object) {
  ErrorReply* _this = reinterpret_cast< ErrorReply* >(object);
  (void)_this;
}
void ErrorReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrorReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrorReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txkv.ErrorReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_code_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txkv.ErrorReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txkv.ErrorReply)
  return target;
}

size_t ErrorReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txkv.ErrorReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ErrorReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorReply::GetClassData() const { return &_class_data_; }

void ErrorReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ErrorReply *>(to)->MergeFrom(
      static_cast<const ErrorReply &>(from));
}


void ErrorReply::MergeFrom(const ErrorReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txkv.ErrorReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorReply::CopyFrom(const ErrorReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txkv.ErrorReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorReply::IsInitialized() const {
  return true;
}

void ErrorReply::InternalSwap(ErrorReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(error_code_, other->error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kv_2eproto_getter, &descriptor_table_kv_2eproto_once,
      file_level_metadata_kv_2eproto[2]);
}

// ===================================================================

class KeyRequest::_Internal {
 public:
};

KeyRequest::KeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:txkv.KeyRequest)
}
KeyRequest::KeyRequest(const KeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cid_, &from.cid_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(key_));
  // @@protoc_insertion_point(copy_constructor:txkv.KeyRequest)
}

inline void KeyRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(key_));
}

KeyRequest::~KeyRequest() {
  // @@protoc_insertion_point(destructor:txkv.KeyRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeyRequest::ArenaDtor(void* object) {
  KeyRequest* _this = reinterpret_cast< KeyRequest* >(object);
  (void)_this;
}
void KeyRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txkv.KeyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(key_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txkv.KeyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cid = 1;
  if (this->_internal_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cid(), target);
  }

  // uint64 key = 2;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txkv.KeyRequest)
  return target;
}

size_t KeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txkv.KeyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cid = 1;
  if (this->_internal_cid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cid());
  }

  // uint64 key = 2;
  if (this->_internal_key() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyRequest::GetClassData() const { return &_class_data_; }

void KeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KeyRequest *>(to)->MergeFrom(
      static_cast<const KeyRequest &>(from));
}


void KeyRequest::MergeFrom(const KeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txkv.KeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cid() != 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyRequest::CopyFrom(const KeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txkv.KeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyRequest::IsInitialized() const {
  return true;
}

void KeyRequest::InternalSwap(KeyRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyRequest, key_)
      + sizeof(KeyRequest::key_)
      - PROTOBUF_FIELD_OFFSET(KeyRequest, cid_)>(
          reinterpret_cast<char*>(&cid_),
          reinterpret_cast<char*>(&other->cid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kv_2eproto_getter, &descriptor_table_kv_2eproto_once,
      file_level_metadata_kv_2eproto[3]);
}

// ===================================================================

class GetReply::_Internal {
 public:
};

GetReply::GetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:txkv.GetReply)
}
GetReply::GetReply(const GetReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&val_, &from.val_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&val_)) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:txkv.GetReply)
}

inline void GetReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&val_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&val_)) + sizeof(error_code_));
}

GetReply::~GetReply() {
  // @@protoc_insertion_point(destructor:txkv.GetReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetReply::ArenaDtor(void* object) {
  GetReply* _this = reinterpret_cast< GetReply* >(object);
  (void)_this;
}
void GetReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:txkv.GetReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&val_)) + sizeof(error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txkv.GetReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 val = 1;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_val(), target);
  }

  // uint32 error_code = 2;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txkv.GetReply)
  return target;
}

size_t GetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txkv.GetReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 val = 1;
  if (this->_internal_val() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_val());
  }

  // uint32 error_code = 2;
  if (this->_internal_error_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReply::GetClassData() const { return &_class_data_; }

void GetReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReply *>(to)->MergeFrom(
      static_cast<const GetReply &>(from));
}


void GetReply::MergeFrom(const GetReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txkv.GetReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_val() != 0) {
    _internal_set_val(from._internal_val());
  }
  if (from._internal_error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReply::CopyFrom(const GetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txkv.GetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReply::IsInitialized() const {
  return true;
}

void GetReply::InternalSwap(GetReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetReply, error_code_)
      + sizeof(GetReply::error_code_)
      - PROTOBUF_FIELD_OFFSET(GetReply, val_)>(
          reinterpret_cast<char*>(&val_),
          reinterpret_cast<char*>(&other->val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kv_2eproto_getter, &descriptor_table_kv_2eproto_once,
      file_level_metadata_kv_2eproto[4]);
}

// ===================================================================

class WriteRequest::_Internal {
 public:
};

WriteRequest::WriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:txkv.WriteRequest)
}
WriteRequest::WriteRequest(const WriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cid_, &from.cid_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(val_));
  // @@protoc_insertion_point(copy_constructor:txkv.WriteRequest)
}

inline void WriteRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&val_) -
    reinterpret_cast<char*>(&cid_)) + sizeof(val_));
}

WriteRequest::~WriteRequest() {
  // @@protoc_insertion_point(destructor:txkv.WriteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WriteRequest::ArenaDtor(void* object) {
  WriteRequest* _this = reinterpret_cast< WriteRequest* >(object);
  (void)_this;
}
void WriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:txkv.WriteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_) -
      reinterpret_cast<char*>(&cid_)) + sizeof(val_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WriteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:txkv.WriteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cid = 1;
  if (this->_internal_cid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cid(), target);
  }

  // uint64 key = 2;
  if (this->_internal_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_key(), target);
  }

  // uint64 val = 3;
  if (this->_internal_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:txkv.WriteRequest)
  return target;
}

size_t WriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:txkv.WriteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cid = 1;
  if (this->_internal_cid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cid());
  }

  // uint64 key = 2;
  if (this->_internal_key() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_key());
  }

  // uint64 val = 3;
  if (this->_internal_val() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_val());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WriteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WriteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WriteRequest::GetClassData() const { return &_class_data_; }

void WriteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WriteRequest *>(to)->MergeFrom(
      static_cast<const WriteRequest &>(from));
}


void WriteRequest::MergeFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:txkv.WriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cid() != 0) {
    _internal_set_cid(from._internal_cid());
  }
  if (from._internal_key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_val() != 0) {
    _internal_set_val(from._internal_val());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:txkv.WriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {
  return true;
}

void WriteRequest::InternalSwap(WriteRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WriteRequest, val_)
      + sizeof(WriteRequest::val_)
      - PROTOBUF_FIELD_OFFSET(WriteRequest, cid_)>(
          reinterpret_cast<char*>(&cid_),
          reinterpret_cast<char*>(&other->cid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kv_2eproto_getter, &descriptor_table_kv_2eproto_once,
      file_level_metadata_kv_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace txkv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::txkv::BaseRequest* Arena::CreateMaybeMessage< ::txkv::BaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txkv::BaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txkv::ConnectionReply* Arena::CreateMaybeMessage< ::txkv::ConnectionReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txkv::ConnectionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txkv::ErrorReply* Arena::CreateMaybeMessage< ::txkv::ErrorReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txkv::ErrorReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txkv::KeyRequest* Arena::CreateMaybeMessage< ::txkv::KeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txkv::KeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::txkv::GetReply* Arena::CreateMaybeMessage< ::txkv::GetReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txkv::GetReply >(arena);
}
template<> PROTOBUF_NOINLINE ::txkv::WriteRequest* Arena::CreateMaybeMessage< ::txkv::WriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::txkv::WriteRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
